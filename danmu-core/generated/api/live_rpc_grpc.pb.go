// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: live_rpc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveService_AddTask_FullMethodName    = "/live.LiveService/AddTask"
	LiveService_DeleteTask_FullMethodName = "/live.LiveService/DeleteTask"
	LiveService_UpdateTask_FullMethodName = "/live.LiveService/UpdateTask"
)

// LiveServiceClient is the client API for LiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LiveService 定义抖音直播管理服务
type LiveServiceClient interface {
	// AddTask 添加直播任务
	AddTask(ctx context.Context, in *LiveConf, opts ...grpc.CallOption) (*Response, error)
	// DeleteTask 删除直播任务
	DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Response, error)
	// UpdateTask 更新直播任务
	UpdateTask(ctx context.Context, in *LiveConf, opts ...grpc.CallOption) (*Response, error)
}

type liveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveServiceClient(cc grpc.ClientConnInterface) LiveServiceClient {
	return &liveServiceClient{cc}
}

func (c *liveServiceClient) AddTask(ctx context.Context, in *LiveConf, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LiveService_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LiveService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServiceClient) UpdateTask(ctx context.Context, in *LiveConf, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, LiveService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServiceServer is the server API for LiveService service.
// All implementations must embed UnimplementedLiveServiceServer
// for forward compatibility.
//
// LiveService 定义抖音直播管理服务
type LiveServiceServer interface {
	// AddTask 添加直播任务
	AddTask(context.Context, *LiveConf) (*Response, error)
	// DeleteTask 删除直播任务
	DeleteTask(context.Context, *TaskID) (*Response, error)
	// UpdateTask 更新直播任务
	UpdateTask(context.Context, *LiveConf) (*Response, error)
	mustEmbedUnimplementedLiveServiceServer()
}

// UnimplementedLiveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveServiceServer struct{}

func (UnimplementedLiveServiceServer) AddTask(context.Context, *LiveConf) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedLiveServiceServer) DeleteTask(context.Context, *TaskID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedLiveServiceServer) UpdateTask(context.Context, *LiveConf) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedLiveServiceServer) mustEmbedUnimplementedLiveServiceServer() {}
func (UnimplementedLiveServiceServer) testEmbeddedByValue()                     {}

// UnsafeLiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServiceServer will
// result in compilation errors.
type UnsafeLiveServiceServer interface {
	mustEmbedUnimplementedLiveServiceServer()
}

func RegisterLiveServiceServer(s grpc.ServiceRegistrar, srv LiveServiceServer) {
	// If the following call pancis, it indicates UnimplementedLiveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveService_ServiceDesc, srv)
}

func _LiveService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveConf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).AddTask(ctx, req.(*LiveConf))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).DeleteTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveConf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).UpdateTask(ctx, req.(*LiveConf))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveService_ServiceDesc is the grpc.ServiceDesc for LiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "live.LiveService",
	HandlerType: (*LiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _LiveService_AddTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _LiveService_DeleteTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _LiveService_UpdateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live_rpc.proto",
}
